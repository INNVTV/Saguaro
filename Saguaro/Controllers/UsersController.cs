using Saguaro.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using WebMatrix.WebData;
using System.Data.Entity;
using Saguaro.Logging.Models;
using Saguaro.Logging.Types;
using Saguaro.Logging;
using System.Threading.Tasks;

namespace Saguaro.Controllers
{
    public class UsersController : Controller
    {

        UsersContext _userContext = new UsersContext();

        //
        // GET: /Users/
        [Authorize(Roles = "Admin")]
        [HttpGet]
        public ActionResult Index()
        {
            var model = _userContext.UserProfiles.ToList().OrderBy(r => r.UserName);
            return View(model);
        }


        //
        // GET: /Users/Create
        [Authorize(Roles = "Admin")]
        [HttpGet]
        public ActionResult Create()
        {
            return View();
        }

        

        [HttpPost]
        [Authorize(Roles = "Admin")]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Create(UserProfile model)
        {
            //return View();

            if (ModelState.IsValid)
            {
                string autoGeneratedPassword = Membership.GeneratePassword(8, 2); 

                try
                {
                    //Create User
                    WebSecurity.CreateUserAndAccount(
                        model.UserName,
                        autoGeneratedPassword,
                        propertyValues: new {
                            Company = model.Company,
                            Email = model.Email
                        });

                    //Assign to "User" Role
                    Roles.AddUserToRole(model.UserName, "User");

                    #region Messaging

                    //Extract current domain name:
                    string domainName = Request.UserHostName.ToString();

                    //Send email:
                    Messaging.MessagingService messaging = new Messaging.MessagingService();
                    string HtmlBody = "Please login with the information below, and test the logging system for Kaz by clicking on the testing link on the portal page. Thanks! <br/><hr/><br/>username: " 
                        + model.UserName + "<br/>" + "password: "
                        + autoGeneratedPassword 
                        + "<br/>" + "<a href='http://" + Request.Url.Host + "/'>LOGIN</a>";

                        

                    await messaging.SendEmail(model.Email, ProjectSettings.Emails.NewUser_EmailSubjectLine, HtmlBody, ProjectSettings.Emails.NewUser_EmailFrom, ProjectSettings.Emails.NewUser_EmailFromName);

                    #endregion

                    #region Logging

                    UserProfile userProfile = await Sql.SelectStatements.GetUserProfileTask(WebSecurity.CurrentUserName);

                    LoggingDataService loggingDataService = new LoggingDataService();
                    string description = "New user created [UserName:" + model.UserName + ", Email: " + model.Email + ", Company: " + model.Company + "]";
                    await loggingDataService.LogAsync(userProfile, LogTypes.Platform, PlatformTypes.UserCreated, description, Request);

                    #endregion

                    return RedirectToAction("Index", "Users");
                }
                catch (MembershipCreateUserException e)
                {
                      ModelState.AddModelError("", e.Message);
                }
            }

            return View(model);

        }


        protected override void Dispose(bool disposing)
        {
            if (_userContext != null)
            {
                _userContext.Dispose();
            }

            base.Dispose(disposing);
        }


    }
}
